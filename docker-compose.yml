version: '3.8'

services:
  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-agroai}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-agroai}
      POSTGRES_DB: ${DB_NAME:-agroai}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-agroai}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      target: builder
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${DB_USER:-agroai}:${DB_PASSWORD:-agroai}@db:5432/${DB_NAME:-agroai}?sslmode=disable
      JWT_SECRET: ${JWT_SECRET:-dev_secret}
      PORT: 8080
    volumes:
      - ./backend:/app
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - dev
      - prod

  backend-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${DB_USER:-agroai}:${DB_PASSWORD:-agroai}@db:5432/${DB_NAME:-agroai}?sslmode=disable
      JWT_SECRET: ${JWT_SECRET}
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - prod

  client:
    build:
      context: ./client
      target: builder
      dockerfile: Dockerfile
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080
    command: npm run dev
    profiles:
      - dev

  client-prod:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend-prod
    profiles:
      - prod

volumes:
  postgres_data:
