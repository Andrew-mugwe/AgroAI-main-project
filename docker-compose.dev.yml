# Docker Compose for AgroAI Development Environment
# PostgreSQL Database + pgAdmin + Redis (optional)
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agroai-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: agroai_dev
      POSTGRES_USER: agroai_user
      POSTGRES_PASSWORD: agroai_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - agroai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agroai_user -d agroai_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin - PostgreSQL Administration Tool (like MongoDB Compass)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: agroai-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@agroai.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./db/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - agroai-network
    depends_on:
      postgres:
        condition: service_healthy

  # Redis (Optional - for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: agroai-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agroai-network
    command: redis-server --appendonly yes --requirepass agroai_redis_password

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

networks:
  agroai-network:
    driver: bridge
