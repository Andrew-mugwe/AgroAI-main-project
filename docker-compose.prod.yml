version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - agroai-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}/frontend:${GITHUB_SHA}
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - VITE_API_URL=/api
    networks:
      - agroai-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}/backend:${GITHUB_SHA}
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - GO_ENV=production
      - PORT=8080
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - agroai-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-agroai}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-agroai}
      - POSTGRES_DB=${DB_NAME:-agroai}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - agroai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-agroai}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - agroai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  agroai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
